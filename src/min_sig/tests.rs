use super::{
    G1Point, 
    G1CompressedPoint, 
    G2Point, 
    G2CompressedPoint, 
    PrivKey, 
    Sha256,
};

use crate::consts::G2_MINUS_ONE;
use crate::errors::BLSError;
use crate::min_sig::HashToCurve;
use solana_bn254::prelude::{alt_bn128_multiplication, alt_bn128_addition, alt_bn128_pairing};

#[derive(Clone, Copy)]
pub struct G1Signature(pub [u8; 64]);

pub fn bls_partial_sign<H: HashToCurve>(
    sk_be_32: &[u8; 32],
    message: impl AsRef<[u8]>,
) -> Result<G1Signature, BLSError> {
    let h_g1 = H::try_hash_to_curve(message)?.0;

    let mut inbuf = [0u8; 96];
    inbuf[..64].copy_from_slice(&h_g1);
    inbuf[64..].copy_from_slice(&sk_be_32[..]);

    let out = alt_bn128_multiplication(&inbuf).map_err(|_| BLSError::AltBN128MulError)?;
    let mut sig = [0u8; 64];
    sig.copy_from_slice(&out[..64]);
    Ok(G1Signature(sig))
}

pub fn aggregate_partials(partials: &[G1Signature]) -> Result<G1Signature, BLSError> {
    if partials.is_empty() {
        return Err(BLSError::SerializationError);
    }
    let mut acc = partials[0].0;

    for s in &partials[1..] {
        let mut inbuf = [0u8; 128];
        inbuf[..64].copy_from_slice(&acc);
        inbuf[64..].copy_from_slice(&s.0);
        let out = alt_bn128_addition(&inbuf).map_err(|_| BLSError::AltBN128AddError)?;
        acc.copy_from_slice(&out[..64]);
    }
    Ok(G1Signature(acc))
}

pub trait PubkeyProvider {
    fn g2_by_index(&self, idx: u16) -> Result<G2Point, BLSError>;
}

pub fn verify_a1_with_indices<H: HashToCurve, M: AsRef<[u8]>>(
    message: M,
    signer_indices: &[u16],
    s_sum: G1Signature,
    pk_provider: &impl PubkeyProvider,
) -> Result<(), BLSError> {
    let k = signer_indices.len();
    if k == 0 {
        return Err(BLSError::SerializationError);
    }

    // Hash message to G1 (64B)
    let h_g1 = H::try_hash_to_curve(message.as_ref())?.0;

    // Allocate (k + 1) pairs
    let mut input = vec![0u8; 192 * (k + 1)];

    // Pairs (H(m), PK_i)
    for (i, idx) in signer_indices.iter().enumerate() {
        let pk = pk_provider.g2_by_index(*idx)?;
        let off = 192 * i;
        input[off..off + 64].copy_from_slice(&h_g1);
        input[off + 64..off + 192].copy_from_slice(&pk.0);
    }

    // Final pair: (S_sum, -G2::one())
    let off = 192 * k;
    input[off..off + 64].copy_from_slice(&s_sum.0);
    input[off + 64..off + 192].copy_from_slice(&G2_MINUS_ONE);

    // Pairing syscall: returns 32B; success == 1 in BE
    let r = alt_bn128_pairing(&input).map_err(|_| BLSError::AltBN128PairingError)?;
    let ok = r.iter().take(31).all(|&b| b == 0) && r[31] == 1;
    if ok { Ok(()) } else { Err(BLSError::BLSVerificationError) }
}


#[test]
fn keygen_g1_compressed() {
    let privkey = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);

    let pubkey = G1CompressedPoint::try_from(privkey).expect("Invalid private key");

    assert_eq!(
        [0x1d, 0xc6, 0x38, 0x33, 0x8a, 0xa8, 0xdf, 0xf2, 0xfd, 0x75, 0xdf, 0x80, 0x9e, 0x9f, 0x33, 0x5d, 0x1b, 0x97, 0x96, 0x90, 0xe7, 0xe0, 0x2f, 0x49, 0x8f, 0x10, 0xbb, 0x7d, 0x2c, 0x4a, 0x50, 0xeb],
        pubkey.0
    );
}

#[test]
fn keygen_g1_uncompressed() {
    let privkey = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);

    let pubkey = G1Point::try_from(privkey).expect("Invalid private key");

    assert_eq!([0x1d, 0xc6, 0x38, 0x33, 0x8a, 0xa8, 0xdf, 0xf2, 0xfd, 0x75, 0xdf, 0x80, 0x9e, 0x9f, 0x33, 0x5d, 0x1b, 0x97, 0x96, 0x90, 0xe7, 0xe0, 0x2f, 0x49, 0x8f, 0x10, 0xbb, 0x7d, 0x2c, 0x4a, 0x50, 0xeb, 0x08, 0x25, 0x1a, 0x23, 0xad, 0x51, 0xac, 0xbc, 0x01, 0xe3, 0x46, 0x94, 0x1a, 0x72, 0x4e, 0x47, 0x95, 0xc1, 0x13, 0x48, 0x1b, 0x5a, 0x81, 0xa6, 0xf5, 0x26, 0xdb, 0x3d, 0xf4, 0xd2, 0x00, 0x0b], pubkey.0);
}

#[test]
fn perps_aggregation() {
    let msg = [&50_000u64.to_le_bytes()[..], b"BTCUSD<"].concat();

    let privkey_1 = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);
    let privkey_2 = PrivKey([
        0x22, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);
    let privkey_3 = PrivKey([
        0x23, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);

    let sig_1 = privkey_1.sign::<Sha256, &[u8]>(&msg).unwrap();
    let sig_2 = privkey_2.sign::<Sha256, &[u8]>(&msg).unwrap();
    let sig_3 = privkey_3.sign::<Sha256, &[u8]>(&msg).unwrap();

    let pubkey_1 = G2Point::try_from(&privkey_1).expect("Invalid private key");
    let pubkey_2 = G2Point::try_from(&privkey_2).expect("Invalid private key");
    let pubkey_3 = G2Point::try_from(&privkey_3).expect("Invalid private key");

    let sig_agg = sig_1 + sig_2 + sig_3;

    let pubkey_agg = pubkey_1 + pubkey_2 + pubkey_3;

    pubkey_agg
        .verify_signature::<Sha256, &[u8], G1Point>(sig_agg.try_into().expect("Invalid signature"), &msg)
        .expect("Failed to verify signature");
}

#[test]
fn keygen_g2_compressed() {
    let privkey = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);
    let pubkey = G2CompressedPoint::try_from(&privkey).expect("Invalid private key");
    assert_eq!([0x8b, 0x1a, 0xc6, 0x3e, 0x24, 0x4f, 0xa4, 0x19, 0x78, 0xf2, 0x84, 0xb4, 0x69, 0xa6, 0xcb, 0xe4, 0xa8, 0xba, 0xeb, 0x71, 0x06, 0x30, 0xad, 0xcc, 0xf6, 0x9b, 0x27, 0xd4, 0xbd, 0x12, 0xf5, 0x76, 0x1e, 0x88, 0xed, 0x4a, 0xeb, 0xd8, 0x43, 0x85, 0x3b, 0xf0, 0x24, 0x9c, 0x7c, 0x2b, 0x37, 0xfb, 0xb0, 0xd1, 0x77, 0xdb, 0x37, 0xe6, 0xab, 0x29, 0xd8, 0x9d, 0x4e, 0x29, 0x72, 0xdf, 0xff, 0x24], pubkey.0);
}

#[test]
fn keygen_g2_uncompressed() {
    let privkey = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);

    let pubkey = G2Point::try_from(&privkey).expect("Invalid private key");

    assert_eq!([0x0b, 0x1a, 0xc6, 0x3e, 0x24, 0x4f, 0xa4, 0x19, 0x78, 0xf2, 0x84, 0xb4, 0x69, 0xa6, 0xcb, 0xe4, 0xa8, 0xba, 0xeb, 0x71, 0x06, 0x30, 0xad, 0xcc, 0xf6, 0x9b, 0x27, 0xd4, 0xbd, 0x12, 0xf5, 0x76, 0x1e, 0x88, 0xed, 0x4a, 0xeb, 0xd8, 0x43, 0x85, 0x3b, 0xf0, 0x24, 0x9c, 0x7c, 0x2b, 0x37, 0xfb, 0xb0, 0xd1, 0x77, 0xdb, 0x37, 0xe6, 0xab, 0x29, 0xd8, 0x9d, 0x4e, 0x29, 0x72, 0xdf, 0xff, 0x24, 0x2d, 0x43, 0xaa, 0x4d, 0xd4, 0x93, 0xe0, 0x9a, 0x03, 0xb6, 0x8c, 0x16, 0x7f, 0x19, 0x5b, 0x59, 0x1e, 0xbc, 0xca, 0x6c, 0x2d, 0x43, 0x82, 0x01, 0xfc, 0x4b, 0xfd, 0x9f, 0x9c, 0x0c, 0x3d, 0xda, 0x0a, 0xb8, 0x48, 0xa4, 0x9c, 0x6f, 0xde, 0xdc, 0x9d, 0xe6, 0x08, 0x3a, 0xff, 0x53, 0x5a, 0xc6, 0x5a, 0xfd, 0x29, 0x8a, 0xf2, 0xa7, 0x27, 0x67, 0xc1, 0x9a, 0xd2, 0xae, 0xf5, 0xc4, 0x91, 0x2c], pubkey.0);
}

#[test]
fn signature_verification() {
    let privkey = PrivKey([
        0x21, 0x6f, 0x05, 0xb4, 0x64, 0xd2, 0xca, 0xb2, 0x72, 0x95, 0x4c, 0x66, 0x0d, 0xd4,
        0x5c, 0xf8, 0xab, 0x0b, 0x26, 0x13, 0x65, 0x4d, 0xcc, 0xc7, 0x4c, 0x11, 0x55, 0xfe,
        0xba, 0xaf, 0xb5, 0xc9,
    ]);

    let signature = privkey
        .sign::<Sha256, &str>("sample")
        .expect("Signature error");

    let signature_compressed =
        G1CompressedPoint::try_from(signature).expect("Failed to compress G1 point");

    let pubkey = G2CompressedPoint::try_from(&privkey).expect("Invalid private key");

    assert!(pubkey
        .verify_signature::<Sha256, &str, G1CompressedPoint>(signature_compressed, "sample")
        .is_ok());
}

#[test]
fn a1_threshold() {
   // Message like your other tests
   let msg = [&50_000u64.to_le_bytes()[..], b"BTCUSD<"].concat();

   let total_keys = 100;
   let signer_count = 75;

   let mut privkeys: Vec<PrivKey> = Vec::with_capacity(total_keys);
   for _ in 0..total_keys {
       privkeys.push(PrivKey::from_random());
   }

   let mut pubkeys_g2: Vec<G2Point> = Vec::with_capacity(total_keys);
   for pk in &privkeys {
       pubkeys_g2.push(G2Point::try_from(pk).expect("g2 from sk"));
   }

   let signer_indices: Vec<u16> = (0..signer_count as u16).collect();

   let mut partials: Vec<G1Signature> = Vec::with_capacity(signer_count);
   for i in 0..signer_count {
       partials.push(
           bls_partial_sign::<Sha256>(&privkeys[i].0, &msg)
               .expect("partial sign"),
       );
   }

   let s_sum = aggregate_partials(&partials).expect("aggregate");

   struct VecPkProvider<'a> {
       pks: &'a [G2Point],
   }
   impl<'a> PubkeyProvider for VecPkProvider<'a> {
       fn g2_by_index(&self, idx: u16) -> Result<G2Point, BLSError> {
           self.pks
               .get(idx as usize)
               .copied()
               .ok_or(BLSError::SerializationError)
       }
   }
   let provider = VecPkProvider { pks: &pubkeys_g2 };

   verify_a1_with_indices::<Sha256, _>(&msg, &signer_indices, s_sum, &provider)
       .expect("A1 threshold verify failed");
}
